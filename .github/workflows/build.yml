name: Daily Build

on:
  repository_dispatch:
    types:
      - build
  push:

env:
  BUILD_NUMBER: ${{ github.event.client_payload.number || 3600 }}
  YEAR: ${{ github.event.client_payload.year }}
  MONTH: ${{ github.event.client_payload.month }}
  DAY: ${{ github.event.client_payload.day }}
  WORKSPACE: ${{ github.workspace }}


jobs:
  source-code:
    name: Check out and process source code
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1 --rebase
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v1
        with:
          name: SourceCode
          path: ./output

  iOS-template:
    needs: source-code
    runs-on: macos-latest
    steps:
      # - uses: actions/cache@v1
      #   id: cache
      #   with:
      #     path: ./output
      #     key: ios-2021-corona
      - name: Get processed code
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -xzf SourceCode/corona.tgz
      - name: Build iOS templates
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./platform/iphone
        run: ./gh_build_templates.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload iOS templates
        uses: actions/upload-artifact@v1
        with:
          name: iOS-Templates
          path: ./output

  tvOS-template:
    needs: source-code
    runs-on: macos-latest
    steps:
      # - uses: actions/cache@v1
      #   id: cache
      #   with:
      #     path: ./output
      #     key: tvos-2021-corona
      - name: Get processed code
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -xzf SourceCode/corona.tgz
      - name: Build tvOS templates
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./platform/tvos
        run: ./gh_build_templates.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload tvOS templates
        uses: actions/upload-artifact@v1
        with:
          name: tvOS-Templates
          path: ./output

  webtemplate:
    needs:
      - source-code
    runs-on: macos-latest
    steps:
      # - uses: actions/cache@v1
      #   id: cache
      #   with:
      #     path: ./output
      #     key: webtemplate-2021-corona
      - name: Set up emsdk
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -q --header='Accept:application/octet-stream' https://github.com/coronalabs/emsdk/releases/download/e1.37.22_64bit/emsdk.tar.xz -O emsdk.tar.xz
          tar -xjf emsdk.tar.xz -C ~/
          sed -i .bak "s#/Users/jenkins#${HOME}#g" ~/.emscripten
          TMP_DIR=$(mktemp -d -t EMSCRIPTENXXX)
          sed -i .bak -E "s#^TEMP_DIR.*#TEMP_DIR = '$TMP_DIR'#g" ~/.emscripten
          xattr -r -d com.apple.quarantine ~/sdk-emscripten-mac || true
      - name: Get processed code
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -xzf SourceCode/corona.tgz
      - name: Build webtemplate
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./platform/emscripten/gmake
        run: ./build_template.sh
      - name: Copy result to output
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p output
          cp -v platform/emscripten/webtemplate.zip output
      - name: Upload webtemplate artifact
        uses: actions/upload-artifact@v1
        with:
          name: Webtemplate
          path: ./output

  linux:
    needs:
      - source-code
    runs-on: ubuntu-latest
    container:
      image: coronalabs/linux_builder_rpi
    steps:
      # - uses: actions/cache@v1
      #   id: cache
      #   with:
      #     path: ./output
      #     key: linux-2021-corona
      - name: Get processed code
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -xzf SourceCode/corona.tgz
      - name: Build linux binaries
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./platform/linux
        run: ../../tools/GHAction/build_native_linux.sh
      - name: Copy result to output
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p output
          cp -v platform/linux/linuxtemplate.tar.gz output
          cp -v platform/linux/raspbiantemplate.tar.gz output
      - name: Upload webtemplate artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: Linux-Templates
          path: ./output

  native:
    needs: source-code
    runs-on: macos-latest
    steps:
      # - uses: actions/cache@v1
      #   id: cache
      #   with:
      #     path: ./output
      #     key: native-2021-corona
      - name: Get processed code
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -xzf SourceCode/corona.tgz
      - name: Build Corona Native
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./tools/GHAction/build_native.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload Corona Native
        uses: actions/upload-artifact@v1
        with:
          name: Native
          path: ./output

  macOS-Simulator:
    needs:
      - source-code
      - tvOS-template
      - iOS-template
      - native
      - webtemplate
      - linux
    runs-on: macos-latest
    steps:
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - name: Get iOS templates
        uses: actions/download-artifact@v1
        with:
          name: iOS-templates
      - name: Put iOS templates in place
        run: cp -v iOS-templates/* platform/resources/iostemplate/
      - name: Get tvOS templates
        uses: actions/download-artifact@v1
        with:
          name: tvOS-templates
      - name: Put iOS templates in place
        run: cp -v tvOS-templates/* platform/resources/iostemplate/
      - name: Get Webtemplate
        uses: actions/download-artifact@v1
        with:
          name: Webtemplate
      - name: Put webtemplate in place
        run: cp -v Webtemplate/webtemplate.zip platform/resources/
      - name: Get Linux templates
        uses: actions/download-artifact@v1
        with:
          name: Linux-Templates
      - name: Put webtemplate in place
        run: |
          cp -v Linux-Templates/linuxtemplate.tar.gz platform/resources/
          cp -v Linux-Templates/raspbiantemplate.tar.gz platform/resources/
      - run: mkdir docs
      - name: Get Sample Code
        uses: actions/checkout@v2
        with:
          repository: coronalabs/samples-coronasdk
          path: docs/SampleCode
      - name: Clean-up docs
        run: rm -rf docs/SampleCode/.git docs/SampleCode/.gitignore
      - name: Get Corona Native
        uses: actions/download-artifact@v1
        with:
          name: Native
      - name: install appdmg
        run: npm install -g appdmg
      - name: install imagemagick
        run: brew install imagemagick gs
      - name: Build DMG
        run: ./tools/GHAction/build_dmg.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload macOS Daily build artifact
        uses: actions/upload-artifact@v1
        with:
          name: CoronaDMG
          path: ./output

  notarize:
    needs:
      - macOS-Simulator
    runs-on: macos-latest
    steps:
      - name: Get built simulator
        uses: actions/download-artifact@v1
        with:
          name: CoronaDMG
      - name: Notarize
        run: |
          if [ -z "$APPLE_AUTH" ]
          then 
            echo 'Skipping because no authorization provided'
            exit 0
          fi
          for dmg in ./CoronaDMG/*.dmg
          do
            xcrun altool --notarize-app $APPLE_AUTH --primary-bundle-id "com.coronalabs.CoronaSimulator.GH$BUILD_NUMBER"  --file "$dmg"
          done
        env:
          APPLE_AUTH: ${{ secrets.AppleAuth }} # --username apple@id.email --password secret-app-specific-pwd --asc-provider anscainc
